magna: If you have `x.translate(X,Y);x.scale(Z,Z);x.rotate(A)`, it can be combined into `x.setTransform(p=C(A)*Z,q=S(A)*Z,-q,p,X,Y)` to do it one shot and you get to avoid doing either a `x.save();...;x.restore()` or `x.resetTransform()` if this is happening in a loop.

# Encoding and decoding binary data

By hand:

    > 0b1100110000011000
    52248
    > (52248).toString(16)
    'cc18'
    > '\ucc18'
    '찘'

Or all in one go:

    > eval('console.log("-->' + "\\u" + (0b1100110000011000).toString(16) + '<--");')
    -->찘<--

I read somewhere that we can encode up to 21 bytes into Unicode.  But my experiments have only reached as high as "\uffff"

    // This can only handle 0x0000 - 0xffff
    // All of these count as 1 char in the output string
    p=c&&c.parentNode||p
    d=0b1010101010101010
    s=String.fromCharCode(d)
    C=s.charCodeAt(0)
    p.textContent=s+` ${s.length} ${C==d} `+C.toString(2)

    // This can handle all possible unicode chars (0x000000 - 0x10ffff)
    //eval("s='\\u{"+(d&0x1fffff).toString(16)+"}'")
    // But it will produce strings of length 2, so no real advantage and not much use for encoding binary data

    // '\u{...}' and String.fromCharCode() give the same result only up to 0xffff
    if(t)return
    p=c&&c.parentNode||p
    for(d=0;d<0x110000;d++){
    eval("s='\\u{"+d.toString(16)+"}'")
    q=String.fromCharCode(d)
    if(s!==q){p.textContent=d.toString(16);return}
    }
    p.textContent="all same"

## Colours

From /d/4868:

    x.fillStyle=R(...[S,C,T].map(_=>127*(_(t)+1))); // such a clever way to do colors

However, this is 13 chars shorter:

    x.fillStyle=`hsl(${99*t},99%,50%`


# Absolute value

```js
Math.abs(n)
(n**2)**.5
n**.5?n:-n
n<0?-n:n
```


# WTFJS

- Bitwise | is greedy on the left but not the right?  (Surely that depends what is on the left and the right...)
- Bitwise >> is greedy on both sides
- What about % ?


# Compression

Use `atob()` and `btoa()` to compress/decompress some strings:

    alert('adifonoiewnfqowinfiodnasfoinqeiwnfqoiwnfoiansdfoinqowfe') //before
    alert(btoa('iØ¢z"{ ßª"ø¨vv¬~§©è°ú¨    ß¢&§±×èz¨Á÷')) //after

But it doesn't work on general strings.  Only on base64 strings.  [a-zA-Z0-9+/]

Alternatively, MrM@_S produced [this escape compressor](https://www.dwitter.net/d/7858) which later evolved into [this](https://www.dwitter.net/d/8186) (Dwitter specific).


# Embed Dwitter Dweets in your own site

Like this:

    <iframe src="https://dweet.dwitter.net/id/123?autoplay=1"></iframe>


# SVG might be shorter than moveTo-lineTo

jylikangas's tree in the wind https://www.dwitter.net/d/8788
```js
c.width|=P=(i,j,a,d)=>d&&x.stroke(new Path2D('M'+[i,j,i+=S(a)*99,j+=C(a)*99]))&P(i,j,a+C(d/2+t)/3,d-1)&P(i,j,a-C(t/2)/3,d-1);P(960,999,66,9)
```


# Changing the background

katkip:
```js
c.style.background="#000" instead of x.fillStyle='#000';x.fillRect(0,0,2e3,2e3)
```


# Doing something every N frames
```js
if(frame%N)c.width*=1
~t%N+1?Z:c.width|=0
```

# Using `arc` to draw squares which can rotate
https://www.dwitter.net/d/14471
Or triangles:
```js
c.width*=1;x.beginPath();x.lineWidth=9;for(i=4;i--;)x.arc(960,540,300,i*6.28/3+t,i*6.28/3+t+C(C(t/9)*1.5)*2),x.stroke()
```
How does it work?  Well arc can be used to draw all or part of a circle, but we only use it to draw single points.  We can draw all 4 points of a square, without having to do `W*S(a)` and `W*C(a)` separately for each axis.  We just pass `W` as the radius argument, and `a` twice as the arc positions.


# Shortcuts

```
x.fill('evenodd') // before
x.fill`evenodd`   // after

font="9em'";restore();save();beginPath() // before
beginPath(save(restore(font="9em'"))),   // after
```


vim: ft=markdown
